---

- name: Create a Digital Ocean droplet and a port-redirecting load_balancer resource using terraform
  hosts: localhost
  connection: local
  become: yes
  gather_facts: no

  tasks:
    - name: Terraform create droplet
      terraform:
        state: "{{ state | default('present') }}"
        project_path: "/var/lib/ansible/digitalocean/terraform_files"
      register: terraform_result
      environment:
        TF_VAR_do_api_token: "{{ do_api_token }}"
        TF_VAR_do_ssh_keys: "{{ do_ssh_keys }}"

    - name: Show contents of terraform_result
      debug:
        var: terraform_result.stdout_lines

    - name: Show contents of terraform_result
      debug:
        var: terraform_result.outputs.ip_address.value

#    - name: Add public IP of load_balancer to hosts
#      add_host:
#        name: "{{ item }}"
#        ansible_port: 80
#        groups: do
#      when: item is defined
#      changed_when: no
#      with_items: "{{ terraform_result.outputs.ip_address.value }}"

    - name: Check existence of DO inventory file
      stat:
        path: ../inv.d/do
      register: inv_file
      become: no

    - name: Create default DO inventory file if not present
      copy:
        dest: ../inv.d/do
        content: "[do]"
        mode: 0644
      when: inv_file.stat.exists == False
      become: no

    - name: Add public IP of load_balancer to DO inventory
      lineinfile:
        path: ../inv.d/do
        create: yes
        state: "{{ state | default('present') }}"
        line: "do1 ansible_host={{ item }} ansible_port=80 ansible_user=root"
        mode: 0644
      when: item is defined
      with_items: "{{ terraform_result.outputs.ip_address.value }}"
      become: no

    - name: Remove DO inventory file if destroying droplets
      file:
        path: ../inv.d/do
        state: absent
      when: state | default('present') == 'absent'
      become: no

    - name: Reload inventory
      meta: refresh_inventory

# New play based on DO inventory file
- name: Wait for droplet availability
  hosts: do
  remote_user: root
  gather_facts: no

  tasks:
    - name: Debug inventory_hostname
      debug:
        var: inventory_hostname

    - name: Wait for port 80 to become available
      wait_for:
        port: 80
        host: "{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}"
      connection: local
      when: state | default('present') == 'present'

